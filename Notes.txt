~ Exposing exceptions is not good , so make sure you handle it well in your backend code

~ Global catches are put in end to handle the exceptions
  they are middlewares
  they are put in end
  they have 4 params (err,req,res,next)

~ We can Pass data from one middleware to another 
  One ugly way to do so is shove everything into req   

~ Zod is basically used for user validation   

~ Hashing  - 1 Way , PW is stored in some gibberish and then our pw is converted into same and is matched
  Encryption - 2 Way (key is needed) PW is encrypted and is decrypted back 
  JWT (Json Web token)  converts our json into a string and anyone who has this string can actually seee the  input , Anyone can decode the string but only who have the PW can verify 
  Local Storage - When user login , a jwt is created and is stored in local storage and is relayed in every request

 ~ JWT Token can be stored in either :
    Cookies ( preferable way )
    Local Storage 

~Debouncing - Delay calling the API many times , instead just call fewer times with a time gap

~Throttling = When Client request too much , so we can handle it like we do in debouncing

~ Error handling middleware ,takes 4 args (err,req,res,next)

~ Why the react needs to have top level div ?
  It makes easy to do reconciliation

~ React memoization hook - It stops re rendering a component when it props are unchanged

~Lazy Load - User should get the code for what he landed on instead of whole code , so lazy loading helps you do that

~ Push state down as much as possible to lessen the number of re renders

~ In fetch we have to do response.json/text Etc depending upon the returned value but in axios we dont have to do that

~ Custom hooks uses normal hooks internally and starts with Use

~ There is a Library called swr that is a hook to fetch data 

~ cpp,c ,java are strongly type while python ,js are loosely

~ tsc --init , tsc -b (to make js file ,then run the js file not ts)

~ target in ts.config specifiees to which js will the ts converts like (es6 ,es5)

~ root contains the file of ts while dist/build contains the js file

~Zod is for run time not compile time (99% times)

~Interfaces can be implemented as a classes where as types can not
  Types can be used to do ORs ANds 

~ npx prisma migrate dev --name xyz (to run migrations)
~ npx prisma generate  
  import {PrismaClient} from "@prisma/client"

  const prisma = new PrismaClient(); 

  // prisma.user.create()

~ Cloud Fare dont use node run time   but have their own runtime on top of v8 